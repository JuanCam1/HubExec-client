/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as HomeImport } from './routes/home'
import { Route as IndexImport } from './routes/index'
import { Route as HomeUploadImport } from './routes/home/upload'
import { Route as HomeSettingImport } from './routes/home/setting'
import { Route as HomeProfileImport } from './routes/home/profile'
import { Route as HomeDownloadImport } from './routes/home/download'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as HomePostIndexImport } from './routes/home/post/index'
import { Route as HomePostPostIdImport } from './routes/home/post/$postId'

// Create/Update Routes

const HomeRoute = HomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const HomeUploadRoute = HomeUploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => HomeRoute,
} as any)

const HomeSettingRoute = HomeSettingImport.update({
  id: '/setting',
  path: '/setting',
  getParentRoute: () => HomeRoute,
} as any)

const HomeProfileRoute = HomeProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => HomeRoute,
} as any)

const HomeDownloadRoute = HomeDownloadImport.update({
  id: '/download',
  path: '/download',
  getParentRoute: () => HomeRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HomePostIndexRoute = HomePostIndexImport.update({
  id: '/post/',
  path: '/post/',
  getParentRoute: () => HomeRoute,
} as any)

const HomePostPostIdRoute = HomePostPostIdImport.update({
  id: '/post/$postId',
  path: '/post/$postId',
  getParentRoute: () => HomeRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/home/download': {
      id: '/home/download'
      path: '/download'
      fullPath: '/home/download'
      preLoaderRoute: typeof HomeDownloadImport
      parentRoute: typeof HomeImport
    }
    '/home/profile': {
      id: '/home/profile'
      path: '/profile'
      fullPath: '/home/profile'
      preLoaderRoute: typeof HomeProfileImport
      parentRoute: typeof HomeImport
    }
    '/home/setting': {
      id: '/home/setting'
      path: '/setting'
      fullPath: '/home/setting'
      preLoaderRoute: typeof HomeSettingImport
      parentRoute: typeof HomeImport
    }
    '/home/upload': {
      id: '/home/upload'
      path: '/upload'
      fullPath: '/home/upload'
      preLoaderRoute: typeof HomeUploadImport
      parentRoute: typeof HomeImport
    }
    '/home/post/$postId': {
      id: '/home/post/$postId'
      path: '/post/$postId'
      fullPath: '/home/post/$postId'
      preLoaderRoute: typeof HomePostPostIdImport
      parentRoute: typeof HomeImport
    }
    '/home/post/': {
      id: '/home/post/'
      path: '/post'
      fullPath: '/home/post'
      preLoaderRoute: typeof HomePostIndexImport
      parentRoute: typeof HomeImport
    }
  }
}

// Create and export the route tree

interface HomeRouteChildren {
  HomeDownloadRoute: typeof HomeDownloadRoute
  HomeProfileRoute: typeof HomeProfileRoute
  HomeSettingRoute: typeof HomeSettingRoute
  HomeUploadRoute: typeof HomeUploadRoute
  HomePostPostIdRoute: typeof HomePostPostIdRoute
  HomePostIndexRoute: typeof HomePostIndexRoute
}

const HomeRouteChildren: HomeRouteChildren = {
  HomeDownloadRoute: HomeDownloadRoute,
  HomeProfileRoute: HomeProfileRoute,
  HomeSettingRoute: HomeSettingRoute,
  HomeUploadRoute: HomeUploadRoute,
  HomePostPostIdRoute: HomePostPostIdRoute,
  HomePostIndexRoute: HomePostIndexRoute,
}

const HomeRouteWithChildren = HomeRoute._addFileChildren(HomeRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/home/download': typeof HomeDownloadRoute
  '/home/profile': typeof HomeProfileRoute
  '/home/setting': typeof HomeSettingRoute
  '/home/upload': typeof HomeUploadRoute
  '/home/post/$postId': typeof HomePostPostIdRoute
  '/home/post': typeof HomePostIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/home/download': typeof HomeDownloadRoute
  '/home/profile': typeof HomeProfileRoute
  '/home/setting': typeof HomeSettingRoute
  '/home/upload': typeof HomeUploadRoute
  '/home/post/$postId': typeof HomePostPostIdRoute
  '/home/post': typeof HomePostIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/home': typeof HomeRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/home/download': typeof HomeDownloadRoute
  '/home/profile': typeof HomeProfileRoute
  '/home/setting': typeof HomeSettingRoute
  '/home/upload': typeof HomeUploadRoute
  '/home/post/$postId': typeof HomePostPostIdRoute
  '/home/post/': typeof HomePostIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/login'
    | '/register'
    | '/home/download'
    | '/home/profile'
    | '/home/setting'
    | '/home/upload'
    | '/home/post/$postId'
    | '/home/post'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/login'
    | '/register'
    | '/home/download'
    | '/home/profile'
    | '/home/setting'
    | '/home/upload'
    | '/home/post/$postId'
    | '/home/post'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/home/download'
    | '/home/profile'
    | '/home/setting'
    | '/home/upload'
    | '/home/post/$postId'
    | '/home/post/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/home",
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/home": {
      "filePath": "home.tsx",
      "children": [
        "/home/download",
        "/home/profile",
        "/home/setting",
        "/home/upload",
        "/home/post/$postId",
        "/home/post/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/home/download": {
      "filePath": "home/download.tsx",
      "parent": "/home"
    },
    "/home/profile": {
      "filePath": "home/profile.tsx",
      "parent": "/home"
    },
    "/home/setting": {
      "filePath": "home/setting.tsx",
      "parent": "/home"
    },
    "/home/upload": {
      "filePath": "home/upload.tsx",
      "parent": "/home"
    },
    "/home/post/$postId": {
      "filePath": "home/post/$postId.tsx",
      "parent": "/home"
    },
    "/home/post/": {
      "filePath": "home/post/index.tsx",
      "parent": "/home"
    }
  }
}
ROUTE_MANIFEST_END */
